{"ast":null,"code":"var _jsxFileName = \"/Users/kendalltrudick/Documents/The-Landing/test-bzgbep/src/components/FormField/DataDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './style.css';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DataDisplay = ({\n  copyStatus,\n  urlData\n}) => {\n  _s();\n\n  // const copyArray = ['Copy', 'Copy', 'Copy']\n  console.log(copyStatus);\n  const [isCopied, setCopied] = useState([]);\n  const [isActive, setIsActive] = useState(false);\n  useEffect(() => {\n    // const initialButtonsClickedText = copyStatus.map(() => 'Copy');\n    // setCopied(initialButtonsClickedText);\n    const initialButtonsClickedStyle = urlData.map(() => false);\n    setIsActive(initialButtonsClickedStyle);\n  }, []);\n\n  const handleClick = index => {\n    // setCopied(prev => \n    //     prev.map((item, buttonIndex) => (buttonIndex === index ? 'Copied!' : item))\n    // )\n    // a.forEach(function(item, i) { if (item == 3452) a[i] = 1010; });\n    // copyStatus.forEach(function(item, buttonIndex) { if (buttonIndex == index) copyStatus[index] = 'Copied'; });\n    const newArr = copyStatus.map((item, buttonIndex) => buttonIndex === index ? 'Copied!' : item);\n    console.log(newArr);\n    setCopied(newArr);\n    setIsActive(prev => prev.map((item, buttonIndex) => buttonIndex === index ? true : item));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resultContainer\",\n      children: urlData.map((url, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resultRow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"origUrlCol\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"origUrl\",\n            children: url.result.original_link\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"newUrlCol\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"newUrl\",\n            children: url.result.full_short_link\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n            text: url.result.full_short_link,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"copyBtn\" // className={copyStatus[index] === 'Copy' ? 'copyBtn' : 'copiedBtn'}\n              ,\n              onClick: () => handleClick(index),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: copyStatus[index]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 26\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(DataDisplay, \"e4JQV2tuZvFbDuTannGtIdBEfk4=\");\n\n_c = DataDisplay;\nexport default DataDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"sources":["/Users/kendalltrudick/Documents/The-Landing/test-bzgbep/src/components/FormField/DataDisplay.js"],"names":["React","useState","useEffect","CopyToClipboard","DataDisplay","copyStatus","urlData","console","log","isCopied","setCopied","isActive","setIsActive","initialButtonsClickedStyle","map","handleClick","index","newArr","item","buttonIndex","prev","url","result","original_link","full_short_link"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,SAASC,eAAT,QAAgC,yBAAhC;;;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAA6B;AAAA;;AAE7C;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEA,QAAM,CAACI,QAAD,EAAWC,SAAX,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA,UAAMW,0BAA0B,GAAGP,OAAO,CAACQ,GAAR,CAAY,MAAM,KAAlB,CAAnC;AACAF,IAAAA,WAAW,CAACC,0BAAD,CAAX;AACH,GALQ,EAKN,EALM,CAAT;;AAOA,QAAME,WAAW,GAAGC,KAAK,IAAI;AACzB;AACA;AACA;AACA;AACA;AAEA,UAAMC,MAAM,GAACZ,UAAU,CAACS,GAAX,CAAe,CAACI,IAAD,EAAOC,WAAP,KAAwBA,WAAW,KAAKH,KAAhB,GAAwB,SAAxB,GAAoCE,IAA3E,CAAb;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACAP,IAAAA,SAAS,CAACO,MAAD,CAAT;AAEAL,IAAAA,WAAW,CAACQ,IAAI,IACZA,IAAI,CAACN,GAAL,CAAS,CAACI,IAAD,EAAOC,WAAP,KAAwBA,WAAW,KAAKH,KAAhB,GAAwB,IAAxB,GAA+BE,IAAhE,CADO,CAAX;AAGH,GAdD;;AAiBA,sBACI;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACKZ,OAAO,CAACQ,GAAR,CAAY,CAACO,GAAD,EAAML,KAAN,kBACb;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,iCACI;AAAe,YAAA,SAAS,EAAC,SAAzB;AAAA,sBAAqCK,GAAG,CAACC,MAAJ,CAAWC;AAAhD,aAAQP,KAAR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACI;AAAe,YAAA,SAAS,EAAC,QAAzB;AAAA,sBAAoCK,GAAG,CAACC,MAAJ,CAAWE;AAA/C,aAAQR,KAAR;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,eAAD;AAAiB,YAAA,IAAI,EAAEK,GAAG,CAACC,MAAJ,CAAWE,eAAlC;AAAA,mCACI;AAEI,cAAA,IAAI,EAAC,QAFT;AAGI,cAAA,SAAS,EAAC,SAHd,CAII;AAJJ;AAKI,cAAA,OAAO,EAAE,MAAMT,WAAW,CAACC,KAAD,CAL9B;AAAA,qCAMC;AAAA,0BACIX,UAAU,CAACW,KAAD;AADd;AAAA;AAAA;AAAA;AAAA;AAND,eACSA,KADT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADC;AADL;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AA4BH,CA5DD;;GAAMZ,W;;KAAAA,W;AA8DN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style.css';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\n\nconst DataDisplay = ({ copyStatus, urlData }) => {\n\n    // const copyArray = ['Copy', 'Copy', 'Copy']\n    console.log(copyStatus)\n\n    const [isCopied, setCopied] = useState([]);\n    const [isActive, setIsActive] = useState(false);\n\n    useEffect(() => {\n        // const initialButtonsClickedText = copyStatus.map(() => 'Copy');\n        // setCopied(initialButtonsClickedText);\n        const initialButtonsClickedStyle = urlData.map(() => false);\n        setIsActive(initialButtonsClickedStyle);\n    }, []);\n\n    const handleClick = index => {\n        // setCopied(prev => \n        //     prev.map((item, buttonIndex) => (buttonIndex === index ? 'Copied!' : item))\n        // )\n        // a.forEach(function(item, i) { if (item == 3452) a[i] = 1010; });\n        // copyStatus.forEach(function(item, buttonIndex) { if (buttonIndex == index) copyStatus[index] = 'Copied'; });\n\n        const newArr=copyStatus.map((item, buttonIndex) => (buttonIndex === index ? 'Copied!' : item))\n        console.log(newArr);\n        setCopied(newArr)\n\n        setIsActive(prev => \n            prev.map((item, buttonIndex) => (buttonIndex === index ? true : item))\n        )\n    }\n\n\n    return (\n        <>     \n        <div className='resultContainer'>\n            {urlData.map((url, index) =>\n            <div className=\"resultRow\">\n                <div className=\"origUrlCol\">\n                    <p key={index} className='origUrl'>{ url.result.original_link }</p>\n                </div>\n                <div className='newUrlCol'>\n                    <p key={index} className='newUrl'>{ url.result.full_short_link }</p>\n                    <CopyToClipboard text={url.result.full_short_link}>\n                        <button\n                            key={index}\n                            type=\"button\"\n                            className='copyBtn'\n                            // className={copyStatus[index] === 'Copy' ? 'copyBtn' : 'copiedBtn'}\n                            onClick={() => handleClick(index)}\n                        ><span>\n                            {copyStatus[index]}\n                        </span>\n                        </button>\n                    </CopyToClipboard>\n                </div>\n            </div>\n            )}\n        </div>  \n        </>\n    )\n}\n\nexport default DataDisplay\n\n"]},"metadata":{},"sourceType":"module"}