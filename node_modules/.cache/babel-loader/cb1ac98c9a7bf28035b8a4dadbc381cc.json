{"ast":null,"code":"var _jsxFileName = \"/Users/kendalltrudick/Documents/The-Landing/test-bzgbep/src/components/FormField/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './style.css';\nimport axios from 'axios'; // import DataDisplay from './DataDisplay';\n\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const api = 'https://api.shrtco.de/v2/shorten?url=';\n  const storedUrlData = JSON.parse(localStorage.getItem('urlData')) || []; // Stores/handles the entered URL form user\n\n  const [inputUrl, setInputUrl] = useState(''); // Stores/handles the fetched URL data\n\n  const [urlData, setUrlData] = useState(storedUrlData); // Error message for if the user did not input any URL\n\n  const [errMsg, setErrMsg] = useState(null); // Error message for if the user entered a bad URL\n\n  const [badUrlMsg, setBadUrlMsg] = useState(null); // Success message for valid URL\n\n  const [successMsg, setSuccessMsg] = useState(null); // To be passed to DataDisplay to set the initial Copy Button text to 'Copy' each time a new search is done\n\n  const [copyStatus, setCopyStatus] = useState(['Copy', 'Copy']);\n  useEffect(() => {\n    const json = JSON.stringify(urlData);\n    localStorage.setItem('urlData', json);\n  }, [urlData]); // useEffect(() => {\n  //     const json = localStorage.getItem('urlData');\n  //     const savedUrlData = JSON.parse(json) || [];\n  //     if (savedUrlData) {\n  //         setUrlData(savedUrlData);\n  //     }\n  // },[]);\n  // Handles capturing the url entered by the user in the input field and assiging it to inputURL\n\n  function handleChange(e) {\n    e.preventDefault();\n    setInputUrl(e.target.value);\n  } // For updating whether or not the user has clicked the copy button\n\n\n  const [isCopied, setCopied] = useState([copyStatus]);\n  useEffect(() => {\n    const initialButtonsClickedText = copyStatus.map(() => 'Copy');\n    setCopied(initialButtonsClickedText);\n  }, []); // handles the click event of the Copy button. Changes the text value of that specific item to 'Copied'\n\n  const handleClick = index => {\n    const newArr = copyStatus.map((item, buttonIndex) => buttonIndex === index ? 'Copied!' : item);\n    setCopied(newArr);\n  }; // Fetches the API data using the inputted URL\n\n\n  const handleURL = () => {\n    return axios.get(api + `${inputUrl}`).then(res => {\n      setUrlData([...urlData, res.data]);\n      setInputUrl('');\n      setCopied([...copyStatus, 'Copy']);\n    }).catch(err => {\n      console.error(\"Error fetching data\");\n      console.log(err);\n    });\n  }; // Handles the submition of the url and checks if it is valid, empty, or valid.\n\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    var regex = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\n\n    if (inputUrl === '') {\n      setSuccessMsg(false);\n      setBadUrlMsg(false);\n      setErrMsg(true);\n      setInputUrl('');\n    } else if (!regex.test(inputUrl)) {\n      setSuccessMsg(false);\n      setBadUrlMsg(true);\n      setErrMsg(false);\n      setInputUrl('');\n    } else {\n      setInputUrl('');\n      setBadUrlMsg(false);\n      setErrMsg(false);\n      setSuccessMsg(true);\n      handleURL();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sectionContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formWrap\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"Form\",\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"FormGroup form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                onChange: handleChange,\n                value: inputUrl,\n                className: \"Input\",\n                size: \"80\",\n                placeholder: \"Shorten a link here...\",\n                style: badUrlMsg || errMsg ? {\n                  border: '1.5px solid hsl(0, 87%, 67%)'\n                } : {}\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this), badUrlMsg && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"ErrorMsg\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    children: \"Please add a valid link\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 63\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 33\n              }, this), errMsg && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"ErrorMsg\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    children: \"Please add a link\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 63\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 33\n              }, this), successMsg && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"SuccessMsg\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    children: \"Success!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 65\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn\",\n              children: \"Shorten It!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DisplayList\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"resultContainer\",\n            children: urlData.map((url, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resultRow\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"origUrlCol\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"origUrl\",\n                  children: url.result.original_link\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"newUrlCol\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"newUrl\",\n                  children: url.result.full_short_link\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n                  text: url.result.full_short_link,\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"copyBtn\",\n                    className: isCopied[index] === 'Copy' ? 'copyBtn' : 'copiedBtn',\n                    onClick: () => handleClick(index),\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: isCopied[index]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 152,\n                      columnNumber: 38\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 25\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Form, \"sYCA+X2yM8IkJwES5Pdk6xwBJOg=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/kendalltrudick/Documents/The-Landing/test-bzgbep/src/components/FormField/Form.js"],"names":["React","useState","useEffect","axios","CopyToClipboard","Form","api","storedUrlData","JSON","parse","localStorage","getItem","inputUrl","setInputUrl","urlData","setUrlData","errMsg","setErrMsg","badUrlMsg","setBadUrlMsg","successMsg","setSuccessMsg","copyStatus","setCopyStatus","json","stringify","setItem","handleChange","e","preventDefault","target","value","isCopied","setCopied","initialButtonsClickedText","map","handleClick","index","newArr","item","buttonIndex","handleURL","get","then","res","data","catch","err","console","error","log","handleSubmit","regex","test","border","url","result","original_link","full_short_link"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style.css';\nimport axios from 'axios';\n// import DataDisplay from './DataDisplay';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nconst Form = () => {\n    const api = 'https://api.shrtco.de/v2/shorten?url=';\n    const storedUrlData = JSON.parse(localStorage.getItem('urlData')) || [];\n\n    // Stores/handles the entered URL form user\n    const [inputUrl, setInputUrl] = useState('');\n    // Stores/handles the fetched URL data\n    const [urlData, setUrlData] = useState(storedUrlData);\n    // Error message for if the user did not input any URL\n    const [errMsg, setErrMsg] = useState(null);\n    // Error message for if the user entered a bad URL\n    const [badUrlMsg, setBadUrlMsg] = useState(null);\n    // Success message for valid URL\n    const [successMsg, setSuccessMsg] = useState(null);\n    // To be passed to DataDisplay to set the initial Copy Button text to 'Copy' each time a new search is done\n    const [copyStatus, setCopyStatus]=useState(['Copy','Copy']);\n\n\n    useEffect(() => {\n        const json = JSON.stringify(urlData);\n        localStorage.setItem('urlData', json);\n    }, [urlData]);\n\n    // useEffect(() => {\n    //     const json = localStorage.getItem('urlData');\n    //     const savedUrlData = JSON.parse(json) || [];\n    //     if (savedUrlData) {\n    //         setUrlData(savedUrlData);\n    //     }\n    // },[]);\n\n\n\n    // Handles capturing the url entered by the user in the input field and assiging it to inputURL\n    function handleChange(e) {\n        e.preventDefault();\n        setInputUrl(e.target.value);\n    }\n\n    // For updating whether or not the user has clicked the copy button\n    const [isCopied, setCopied] = useState([copyStatus]);\n\n    useEffect(() => {\n        const initialButtonsClickedText = copyStatus.map(() => 'Copy');\n        setCopied(initialButtonsClickedText);\n    }, []);\n\n    // handles the click event of the Copy button. Changes the text value of that specific item to 'Copied'\n    const handleClick = index => {\n\n        const newArr=copyStatus.map((item, buttonIndex) => (buttonIndex === index ? 'Copied!' : item))\n        setCopied(newArr);\n\n    }\n\n\n    // Fetches the API data using the inputted URL\n    const handleURL = () => {\n        return axios.get(api+`${inputUrl}`)\n              .then(res => {\n                setUrlData([...urlData, res.data])\n                setInputUrl('')\n                setCopied([...copyStatus, 'Copy']);\n            }) .catch (err => {\n                console.error(\"Error fetching data\")\n                console.log(err)\n            })\n        }\n\n    // Handles the submition of the url and checks if it is valid, empty, or valid.\n    function handleSubmit(e) {\n        e.preventDefault();\n        var regex = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\n\n        if (inputUrl === '') {\n            setSuccessMsg(false);\n            setBadUrlMsg(false);\n            setErrMsg(true);\n            setInputUrl('');\n        } else if (!regex.test(inputUrl)) {\n            setSuccessMsg(false);\n            setBadUrlMsg(true);\n            setErrMsg(false);\n            setInputUrl('');\n        } else {\n            setInputUrl('');\n            setBadUrlMsg(false);\n            setErrMsg(false);\n            setSuccessMsg(true);\n            handleURL();\n        }\n    }\n\n\n\n    return (\n        <>\n            <div className=\"sectionContainer\">\n                <div className='formContainer'>\n                    <div className='formWrap'>\n                        <form className=\"Form\" onSubmit={handleSubmit}>\n                            <div className=\"FormGroup form-group\">\n                                <input \n                                    type=\"text\" \n                                    onChange={handleChange} \n                                    value={inputUrl} \n                                    className=\"Input\" \n                                    size='80' \n                                    placeholder=\"Shorten a link here...\"\n                                    style={badUrlMsg || errMsg ? {border:'1.5px solid hsl(0, 87%, 67%)'} : {}}\n                                />\n                                {badUrlMsg && (\n                                <span><p className='ErrorMsg'><i>Please add a valid link</i></p></span>\n                                )}\n                                {errMsg && (\n                                <span><p className='ErrorMsg'><i>Please add a link</i></p></span>\n                                )}\n                                {successMsg && (\n                                <span><p className='SuccessMsg'><i>Success!</i></p></span>\n                                )}\n                            </div>\n                            <button\n                                type=\"submit\"\n                                className=\"btn\"\n                            >\n                                Shorten It!\n                            </button>\n                        </form>\n                    </div> \n                    <div className='DisplayList'>\n                    <div className='resultContainer'>\n                        {urlData.map((url, index) =>\n                        <div className=\"resultRow\">\n                            <div className=\"origUrlCol\">\n                                <p key={index} className='origUrl'>{ url.result.original_link }</p>\n                            </div>\n                            <div className='newUrlCol'>\n                                <p key={index} className='newUrl'>{ url.result.full_short_link }</p>\n                                <CopyToClipboard text={url.result.full_short_link}>\n                                    <button\n                                        key={index}\n                                        type=\"button\"\n                                        className='copyBtn'\n                                        className={isCopied[index] === 'Copy' ? 'copyBtn' : 'copiedBtn'}\n                                        onClick={() => handleClick(index)}\n                                    ><span>\n                                        {isCopied[index]}\n                                    </span>\n                                    </button>\n                                </CopyToClipboard>\n                            </div>\n                        </div>\n                        )}\n                    </div>  \n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}