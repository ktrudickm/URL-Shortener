{"ast":null,"code":"var _jsxFileName = \"/Users/kendalltrudick/Documents/The-Landing/test-bzgbep/src/components/FormField/DataDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './style.css';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DataDisplay = ({\n  urlData\n}) => {\n  _s();\n\n  const [isCopied, setCopied] = useState(['']);\n  const [buttonsClicked, setButtonsClicked] = useState([]);\n  useEffect(() => {\n    const initialButtonsClicked = urlData.map(() => false);\n    setButtonsClicked(initialButtonsClicked);\n    const initialButtonsClickedText = urlData.map(() => 'Copy');\n    setCopied(initialButtonsClickedText);\n  }, []);\n\n  const handleClick = index => {\n    setButtonsClicked(prev => prev.map((item, buttonIndex) => buttonIndex === index ? true : item));\n    setCopied(prev => prev.map((item, buttonIndex) => buttonIndex === index ? 'Copied' : item));\n  }; // const CopyLink = () => {\n  //     setCopied('Copied')\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resultContainer\",\n      children: urlData.map((url, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resultRow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"origUrlCol\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"origUrl\",\n            children: url.result.original_link\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"newUrlCol\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"newUrl\",\n            children: url.result.full_short_link\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n            text: url.result.full_short_link,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              value: \"Click\",\n              id: url.result.code,\n              type: \"button\" // isCopied={isCopied ? 'Copy' : 'Copied!'}\n              ,\n              className: \"copyBtn\",\n              onClick: () => handleClick(index) // onClick={CopyLink}\n              ,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: buttonsClicked[index] && isCopied[index]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 26\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(DataDisplay, \"Ep/mWVpIZWef9kReDl2sdUQ0xjA=\");\n\n_c = DataDisplay;\nexport default DataDisplay; // {isCopied && (\n//     <button\n//         type=\"button\"\n//         className=\"copyBtn\"\n//     >\n//         Copied!\n//     </button>\n// )}\n\nvar _c;\n\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"sources":["/Users/kendalltrudick/Documents/The-Landing/test-bzgbep/src/components/FormField/DataDisplay.js"],"names":["React","useState","useEffect","CopyToClipboard","DataDisplay","urlData","isCopied","setCopied","buttonsClicked","setButtonsClicked","initialButtonsClicked","map","initialButtonsClickedText","handleClick","index","prev","item","buttonIndex","url","result","original_link","full_short_link","code"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,SAASC,eAAT,QAAgC,yBAAhC;;;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAEjC,QAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBN,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAtC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,qBAAqB,GAAGL,OAAO,CAACM,GAAR,CAAY,MAAM,KAAlB,CAA9B;AACAF,IAAAA,iBAAiB,CAACC,qBAAD,CAAjB;AACA,UAAME,yBAAyB,GAAGP,OAAO,CAACM,GAAR,CAAY,MAAM,MAAlB,CAAlC;AACAJ,IAAAA,SAAS,CAACK,yBAAD,CAAT;AACH,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMC,WAAW,GAAGC,KAAK,IAAI;AACzBL,IAAAA,iBAAiB,CAACM,IAAI,IAClBA,IAAI,CAACJ,GAAL,CAAS,CAACK,IAAD,EAAOC,WAAP,KAAwBA,WAAW,KAAKH,KAAhB,GAAwB,IAAxB,GAA+BE,IAAhE,CADa,CAAjB;AAGAT,IAAAA,SAAS,CAACQ,IAAI,IACVA,IAAI,CAACJ,GAAL,CAAS,CAACK,IAAD,EAAOC,WAAP,KAAwBA,WAAW,KAAKH,KAAhB,GAAwB,QAAxB,GAAmCE,IAApE,CADK,CAAT;AAGH,GAPD,CAZiC,CAqBjC;AACA;AACA;;;AAEA,sBACI;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACKX,OAAO,CAACM,GAAR,CAAY,CAACO,GAAD,EAAMJ,KAAN,kBACb;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,iCACI;AAAe,YAAA,SAAS,EAAC,SAAzB;AAAA,sBAAqCI,GAAG,CAACC,MAAJ,CAAWC;AAAhD,aAAQN,KAAR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACI;AAAe,YAAA,SAAS,EAAC,QAAzB;AAAA,sBAAoCI,GAAG,CAACC,MAAJ,CAAWE;AAA/C,aAAQP,KAAR;AAAA;AAAA;AAAA;AAAA,kBADJ,eAGI,QAAC,eAAD;AAAiB,YAAA,IAAI,EAAEI,GAAG,CAACC,MAAJ,CAAWE,eAAlC;AAAA,mCACI;AACI,cAAA,KAAK,EAAC,OADV;AAGI,cAAA,EAAE,EAAEH,GAAG,CAACC,MAAJ,CAAWG,IAHnB;AAII,cAAA,IAAI,EAAC,QAJT,CAKI;AALJ;AAMI,cAAA,SAAS,EAAC,SANd;AAOI,cAAA,OAAO,EAAE,MAAMT,WAAW,CAACC,KAAD,CAP9B,CAQI;AARJ;AAAA,qCASC;AAAA,0BACIN,cAAc,CAACM,KAAD,CAAd,IAAyBR,QAAQ,CAACQ,KAAD;AADrC;AAAA;AAAA;AAAA;AAAA;AATD,eAESA,KAFT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADC;AADL;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAiCH,CA1DD;;GAAMV,W;;KAAAA,W;AA4DN,eAAeA,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style.css';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\n\nconst DataDisplay = ({ urlData }) => {\n\n    const [isCopied, setCopied] = useState(['']);\n    const [buttonsClicked, setButtonsClicked] = useState([]);\n\n    useEffect(() => {\n        const initialButtonsClicked = urlData.map(() => false);\n        setButtonsClicked(initialButtonsClicked);\n        const initialButtonsClickedText = urlData.map(() => 'Copy');\n        setCopied(initialButtonsClickedText)\n    }, []);\n\n    const handleClick = index => {\n        setButtonsClicked(prev => \n            prev.map((item, buttonIndex) => (buttonIndex === index ? true : item))\n        )\n        setCopied(prev => \n            prev.map((item, buttonIndex) => (buttonIndex === index ? 'Copied' : item))\n        )\n    }\n\n    // const CopyLink = () => {\n    //     setCopied('Copied')\n    // }\n\n    return (\n        <>     \n        <div className='resultContainer'>\n            {urlData.map((url, index) =>\n            <div className=\"resultRow\">\n                <div className=\"origUrlCol\">\n                    <p key={index} className='origUrl'>{ url.result.original_link }</p>\n                </div>\n                <div className='newUrlCol'>\n                    <p key={index} className='newUrl'>{ url.result.full_short_link }</p>\n                    {/* {buttonsClicked && ( */}\n                    <CopyToClipboard text={url.result.full_short_link}>\n                        <button\n                            value='Click'\n                            key={index}\n                            id={url.result.code}\n                            type=\"button\"\n                            // isCopied={isCopied ? 'Copy' : 'Copied!'}\n                            className=\"copyBtn\"\n                            onClick={() => handleClick(index)}\n                            // onClick={CopyLink}\n                        ><span>\n                            {buttonsClicked[index] && isCopied[index]}\n                        </span>\n                        </button>\n                    </CopyToClipboard>\n                   {/* )} */}\n                </div>\n            </div>\n            )}\n        </div>  \n        </>\n    )\n}\n\nexport default DataDisplay\n\n// {isCopied && (\n//     <button\n//         type=\"button\"\n//         className=\"copyBtn\"\n//     >\n//         Copied!\n//     </button>\n// )}"]},"metadata":{},"sourceType":"module"}