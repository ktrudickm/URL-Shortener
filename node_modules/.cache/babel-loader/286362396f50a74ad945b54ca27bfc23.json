{"ast":null,"code":"var _jsxFileName = \"/Users/kendalltrudick/Documents/The-Landing/test-bzgbep/src/components/FormField/DataDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './style.css';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DataDisplay = ({\n  urlData\n}) => {\n  _s();\n\n  const [isCopied, setCopied] = useState(['']);\n  useEffect(() => {\n    const initialButtonsClickedText = urlData.map(() => 'Copy');\n    setCopied(initialButtonsClickedText);\n  }, []);\n\n  const handleClick = index => {\n    setCopied(prev => prev.map((item, buttonIndex) => buttonIndex === index ? 'Copied!' : item));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resultContainer\",\n      children: urlData.map((url, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resultRow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"origUrlCol\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"origUrl\",\n            children: url.result.original_link\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"newUrlCol\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"newUrl\",\n            children: url.result.full_short_link\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n            text: url.result.full_short_link,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"copyBtn\",\n              style: isCopied[index] === 'Copied' ? {\n                backgroundColor: 'hsl(180, 66%, 63%)'\n              } : {},\n              onClick: () => handleClick(index),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: isCopied[index]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 26\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(DataDisplay, \"0mzjcDEoNDMTi0CxT0m6Dsv5syw=\");\n\n_c = DataDisplay;\nexport default DataDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"sources":["/Users/kendalltrudick/Documents/The-Landing/test-bzgbep/src/components/FormField/DataDisplay.js"],"names":["React","useState","useEffect","CopyToClipboard","DataDisplay","urlData","isCopied","setCopied","initialButtonsClickedText","map","handleClick","index","prev","item","buttonIndex","url","result","original_link","full_short_link","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,SAASC,eAAT,QAAgC,yBAAhC;;;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAEjC,QAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBN,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,yBAAyB,GAAGH,OAAO,CAACI,GAAR,CAAY,MAAM,MAAlB,CAAlC;AACAF,IAAAA,SAAS,CAACC,yBAAD,CAAT;AACH,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAME,WAAW,GAAGC,KAAK,IAAI;AACzBJ,IAAAA,SAAS,CAACK,IAAI,IACVA,IAAI,CAACH,GAAL,CAAS,CAACI,IAAD,EAAOC,WAAP,KAAwBA,WAAW,KAAKH,KAAhB,GAAwB,SAAxB,GAAoCE,IAArE,CADK,CAAT;AAGH,GAJD;;AAOA,sBACI;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACKR,OAAO,CAACI,GAAR,CAAY,CAACM,GAAD,EAAMJ,KAAN,kBACb;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,iCACI;AAAe,YAAA,SAAS,EAAC,SAAzB;AAAA,sBAAqCI,GAAG,CAACC,MAAJ,CAAWC;AAAhD,aAAQN,KAAR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACI;AAAe,YAAA,SAAS,EAAC,QAAzB;AAAA,sBAAoCI,GAAG,CAACC,MAAJ,CAAWE;AAA/C,aAAQP,KAAR;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,eAAD;AAAiB,YAAA,IAAI,EAAEI,GAAG,CAACC,MAAJ,CAAWE,eAAlC;AAAA,mCACI;AAEI,cAAA,IAAI,EAAC,QAFT;AAGI,cAAA,SAAS,EAAC,SAHd;AAII,cAAA,KAAK,EAAEZ,QAAQ,CAACK,KAAD,CAAR,KAAoB,QAApB,GAA+B;AAACQ,gBAAAA,eAAe,EAAE;AAAlB,eAA/B,GAAyE,EAJpF;AAKI,cAAA,OAAO,EAAE,MAAMT,WAAW,CAACC,KAAD,CAL9B;AAAA,qCAMC;AAAA,0BACIL,QAAQ,CAACK,KAAD;AADZ;AAAA;AAAA;AAAA;AAAA;AAND,eACSA,KADT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADC;AADL;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AA4BH,CA5CD;;GAAMP,W;;KAAAA,W;AA8CN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style.css';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\n\nconst DataDisplay = ({ urlData }) => {\n\n    const [isCopied, setCopied] = useState(['']);\n\n    useEffect(() => {\n        const initialButtonsClickedText = urlData.map(() => 'Copy');\n        setCopied(initialButtonsClickedText)\n    }, []);\n\n    const handleClick = index => {\n        setCopied(prev => \n            prev.map((item, buttonIndex) => (buttonIndex === index ? 'Copied!' : item))\n        )\n    }\n\n\n    return (\n        <>     \n        <div className='resultContainer'>\n            {urlData.map((url, index) =>\n            <div className=\"resultRow\">\n                <div className=\"origUrlCol\">\n                    <p key={index} className='origUrl'>{ url.result.original_link }</p>\n                </div>\n                <div className='newUrlCol'>\n                    <p key={index} className='newUrl'>{ url.result.full_short_link }</p>\n                    <CopyToClipboard text={url.result.full_short_link}>\n                        <button\n                            key={index}\n                            type=\"button\"\n                            className='copyBtn'\n                            style={isCopied[index] === 'Copied' ? {backgroundColor: 'hsl(180, 66%, 63%)'} : {}}\n                            onClick={() => handleClick(index)}\n                        ><span>\n                            {isCopied[index]}\n                        </span>\n                        </button>\n                    </CopyToClipboard>\n                </div>\n            </div>\n            )}\n        </div>  \n        </>\n    )\n}\n\nexport default DataDisplay\n\n"]},"metadata":{},"sourceType":"module"}